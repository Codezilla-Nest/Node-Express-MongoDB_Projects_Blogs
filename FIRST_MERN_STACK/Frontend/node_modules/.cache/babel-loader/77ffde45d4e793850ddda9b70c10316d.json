{"ast":null,"code":"var _jsxFileName = \"/home/muhib/Desktop/SalikAli/Trash/Github Repositires/MERN/Express-MonogoDB-Node/FIRST_MERN_STACK/Frontend/src/Components/Message.js\",\n  _s = $RefreshSig$();\nimport React, { Fragment, useState, useRef } from \"react\";\nimport * as seeMessage from \"./Message.module.css\";\nimport ShowMessage from \"./ShowMessage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Message = props => {\n  _s();\n  const [isShowMessage, setShowMessage] = useState(false);\n  const [error, setError] = useState(\"\");\n  const code = useRef(\"\");\n  const validationForm = e => {\n    e.preventDefault();\n    const data = {\n      code: code.current.value\n    };\n    if (data.message.trim() === \"\" && data.code.trim() !== \"\") {\n      setError(\"Message Filed is Empty\");\n      setModel(() => true);\n    } else if (data.message.trim() !== \"\" && data.code.trim() === \"\") {\n      setError(\"Secret Code Field is Empty !\");\n      setModel(() => true);\n    } else if (data.message.trim() === \"\" && data.code.trim() === \"\") {\n      setError(\"Both Fields are Empty !\");\n      setModel(() => true);\n    } else if (data.message.trim() !== \"\" && data.code.trim() !== \"\" && data.code.length < 5) {\n      setError(\"Code must contain at least 5 characters!\");\n      setModel(() => true);\n    }\n  };\n  const hideModelHanler = () => {\n    setModel(() => false);\n  };\n  const messageHandler = e => {\n    e.preventDefault();\n    setShowMessage(() => true);\n  };\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [!isShowMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: seeMessage[\"form-container\"],\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"secret-code\",\n          children: \"Enter Secret Code:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: seeMessage.btn,\n          type: \"submit\",\n          class: \"btn\",\n          onClick: messageHandler,\n          children: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), isShowMessage && /*#__PURE__*/_jsxDEV(ShowMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(Message, \"Xid8aCYuMMF1stvlP9MkQgW01z4=\");\n_c = Message;\nexport default Message;\nvar _c;\n$RefreshReg$(_c, \"Message\");","map":{"version":3,"names":["React","Fragment","useState","useRef","seeMessage","ShowMessage","Message","props","isShowMessage","setShowMessage","error","setError","code","validationForm","e","preventDefault","data","current","value","message","trim","setModel","length","hideModelHanler","messageHandler","btn"],"sources":["/home/muhib/Desktop/SalikAli/Trash/Github Repositires/MERN/Express-MonogoDB-Node/FIRST_MERN_STACK/Frontend/src/Components/Message.js"],"sourcesContent":["import React, { Fragment, useState,useRef } from \"react\";\nimport * as seeMessage from \"./Message.module.css\";\nimport ShowMessage from \"./ShowMessage\";\n\nconst Message = (props) => {\n  const [isShowMessage, setShowMessage] = useState(false);\n  const [error, setError] = useState(\"\");\n  const code = useRef(\"\");\n  const validationForm = (e) => {\n    e.preventDefault();\n    const data = {\n      code: code.current.value,\n    };\n    if (data.message.trim() === \"\" && data.code.trim() !== \"\") {\n      setError(\"Message Filed is Empty\");\n      setModel(() => true);\n    } else if (data.message.trim() !== \"\" && data.code.trim() === \"\") {\n      setError(\"Secret Code Field is Empty !\");\n      setModel(() => true);\n    } else if (data.message.trim() === \"\" && data.code.trim() === \"\") {\n      setError(\"Both Fields are Empty !\");\n      setModel(() => true);\n    } else if (\n      data.message.trim() !== \"\" &&\n      data.code.trim() !== \"\" &&\n      data.code.length < 5\n    ) {\n      setError(\"Code must contain at least 5 characters!\");\n      setModel(() => true);\n    }\n  };\n  const hideModelHanler = () => {\n    setModel(() => false);\n  };\n  const messageHandler = (e) => {\n    e.preventDefault();\n    setShowMessage(() => true);\n  };\n  return (\n    <Fragment>\n      {!isShowMessage && (\n        <div className={seeMessage[\"form-container\"]}>\n          <form>\n            <label for=\"secret-code\">Enter Secret Code:</label>\n            <input type=\"password\" />\n            <br />\n            <button\n              className={seeMessage.btn}\n              type=\"submit\"\n              class=\"btn\"\n              onClick={messageHandler}\n            >\n              submit\n            </button>\n          </form>\n        </div>\n      )}\n      {isShowMessage && <ShowMessage />}\n    </Fragment>\n  );\n};\n\nexport default Message;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}